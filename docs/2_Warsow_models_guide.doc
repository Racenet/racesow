{\rtf1\ansi\ansicpg1252\deff0{\fonttbl{\f0\fnil\fcharset0 Times New Roman;}}
{\colortbl ;\red0\green0\blue127;\red0\green0\blue0;}
{\*\generator Msftedit 5.41.15.1507;}\viewkind4\uc1\pard\nowidctlpar\hyphpar0\ri-69\sl240\slmult1\qc\tx708\tx1416\tx2123\tx2832\tx3540\tx4247\tx4956\tx5664\tx6372\tx7080\tx7787\tx8495\lang1033\kerning2\b\f0\fs32 Warsow modeling guide\par
\pard\nowidctlpar\hyphpar0\sl240\slmult1\qc\tx0\tx708\tx1416\tx2123\tx2832\tx3540\tx4247\tx4956\tx5664\tx6372\tx7080\tx7787\tx8495\par
\kerning28\ul\fs24\par
\pard\nowidctlpar\hyphpar0\sl240\slmult1\tx0\tx708\tx1416\tx2123\tx2832\tx3540\tx4247\tx4956\tx5664\tx6372\tx7080\tx7787\tx8495\ulnone\b0\par
Media creation/modification techniques are very similar to \i Quake 3 Arena \i0 and \i Half-life\i0 . All visual medias can be classified like this :\par
\b\par
\par
\kerning2\fs28\tab\ul 2D elements :\kerning0\ulnone\b0\fs24\par
\kerning28\tab\tab -\ul\b  DECALS, HITS, SPLASHES\ulnone\b0\par
\tab\tab -\ul\b  TRAILS\ulnone\b0\par
\tab\tab -\ul\b  Heads Up Display elements (HUD)\par
\ulnone\b0 You just need knowledge on any 2D editing program (photoshop, the gimp ...) and knowledge about \i QFusion\i0  shaders.\par
HUD editing ressources can be found on the Warsow forum and on the Wiki.\par
\par
\kerning2\b\fs28\tab\ul Maps (levels)\kerning0\ulnone\b0\fs24\par
\kerning28\tab\tab - Maps in warsow are stored in the same file format as \i Quake 3 Arena\i0 , \i RTCW : Enemy Territory\i0 , and mostly all \i Q3 engine \i0 based games. The main tools used are \i GTK radiant \i0 or \i Quark\i0 .\par
\i GTK radiant \cf1\ul\i0 http://www.qeradiant.com/. \cf2\ulnone\par
\i Quark\i0  \cf1\ul http://quark.planetquake.gamespy.com\cf2\ulnone /.\par
To configure the softwares for warsow specificities, see the sticky threads in Warsow forum's mapping section : \cf1\ul http://www.warsow.net/forum/viewforum.php?id=12\ulnone\par
\cf2 Otherwise, maps creation follows the same process as Quake 3 Arena, so map building process won't be explained in this guide.\par
\cf0\ul\b\par
\kerning2\ulnone\fs28\tab\ul 3D models :\ulnone\b0\par
\kerning28\fs24\tab\tab -\ul\b  ITEMS, PROJECTILES, MAP OBJECTS\ulnone\b0\par
\tab\tab -\ul\b  WEAPONS\ulnone\b0\par
\tab\tab -\ul\b  CHARACTERS\ulnone\par
\par
\cf2\b0\par
All this elements use textures and shaders, with the same specificities as \i Quake 3 Arena\i0 . Textures can be Jpeg (.jpg) files and uncompressed Targa (.tga) files.\par
- Jpeg's advantage is it's very low file size, but it has no alpha channels (however transparency and blending are possible with Jpeg thanks to shaders).\par
- Targa files are heavy because \i Qfusion engine \i0 does not support RLE compression. On the other hand it's a high quality format and supports alpha channels.\par
Whatever the file format you use, textures size should not exceed 512x512 pixels for display performances, though the engine can display up to 4096x4096 pix textures.\par
Shaders are simple text files that performs texture operations and many special effects. A complete QFusion shader guide is available in the Warsow SDK and QFusion SDK.\par
\par
\par
\kerning2\ul\b\fs28 3D models :\par
\kerning28\ulnone\b0\fs24\par
\tab All the 3D models in Warsow use the MD3 file format used in Quake 3, except the character models that use .SKM/SKP file format.\par
MD3 models can be created with almost all the 3D softwares available, with additional free plugins. A usefull tool you may need is \i N'Pherno MD3Compiler (NMD3C)\i0 . MD3 can be animated. They only support "per vertex" animations.\par
SKM/SKP models are compiled from .smd files, that are also used in \i Half-life 1&2. \i0 They only support skeletal animation.\par
\par
Keep all your models as low as possible in terms of polycount. Making models for a real-time 3D engine can be harder than highpoly modeling (mostly for a low end computer game as warsow). Each time you add a triangle or vertex somewhere, ask yourself if it's really needed. You shouldn't have very detailed element (like the face of a character) and "squarry" parts (like the legs). That seems an evidence but it's a mistake often committed. If you have \i Quake 3 \i0 or \i Quake 2\i0 , look at the player models meshes. Look how the vertices and edges are set out. The mesh is "constant", you don't have many details on some parts of the model, and low details on other parts. That's very important for polycount.\par
Otherwise you have no real limitations. MD3 models can be composed of many different elements, but one element can't have more than 1024 triangles.\par
\par
\tab LOD (Level Of Detail) : For each model you create (MD3 and SKM/SKP), you'll have to make LODs for it. A LOD is a model with less detail, displayed in game when far from the camera to improve performance. It should look like this :\par
- any_model.md3 : The 100% detailed model, for close range display.\par
- any_model_1.md3 : ~80% detailed model, with less polygons. For close/middle range (you still can use the highest detailed model for this LOD)\par
- any_model_2.md3  : ~60% detailed. Far range\par
- any_model_3.md3  : As less polygons as possible, for very far range display.\par
LODs are very important for performance, though your model will work just fine if you don't have any. But PLEASE make LODs.\par
\par
\tab Outlines : you don't have to manually create the outlines for the models. The game engine will automatically display them (hopefully). For special models that should not have outlines, some changes should be added in the code.\par
\par
\tab Mostly all your models will need the special celluloid shader used in Warsow. Just add these lines at the bottom of your shader :\par
\b\fs20\{\par
(...)\par
\tab if textureCubeMap //for 3d cards supporting cubemaps\par
\tab\{\par
\tab\tab shadecubemap env/cell\par
\tab\tab rgbGen identity\par
\tab\tab blendFunc filter\par
\tab\}\par
\tab endif\par
\par
\tab if ! textureCubeMap //for 3d cards not supporting cubemaps\par
\tab\{\par
\tab\tab map gfx/colors/celshade.tga\par
\tab\tab blendfunc filter\par
\tab\tab rgbGen identity\par
\tab\tab tcGen environment\par
\tab\}\par
\tab endif\par
\}\b0\par
\i\fs24\par
\i0\par
\par
\tab\tab -\ul\b  ITEMS, PROJECTILES, MAP OBJECTS\b0\par
\ulnone\par
You'll just need a plugin that can export in .MD3 file format. If your 3D software can't export .MD3, you can export your models in .3DS (3DSMax mesh file format) or .ASE (Ascii 3D scene file format), and then load them in NMD3C, and save them in .MD3 with the right texture/shader path. You can also change the offset position and scale of the models with NMD3C. Even if your software can directly export .MD3, NMD3C can be useful to correct the model's smooth shading or the texture/shader path.\par
Milkshape3D can do the same job too. You can even model and animate with Milkshape, import and export both MD3 and SMD (for player models).\par
You'll maybe also need a plugin or script that allows you to import MD3 in your 3D scene if you want to modify an existing model.\par
Here is a MD3 importer script for 3DSMax (kind of buggy but still works) \cf1\ul http://www.scriptspot.com/scripts/web_upload/Chris%20Cookson/q3-md3beta.zip\cf2\ulnone\par
\par
\par
\par
\tab\tab -\ul\b  WEAPONS\b0\par
\ulnone\par
The same method should be used for weapon models, but you'll have to take care of the TAGS. You will also have to take of the center of mass of your models. Set the center of mass where the tag is supposed to be.\par
What's a TAG ?\par
TAGs are special .MD3 models used in \i Quake 3 Arena \i0 and \i Warsow.\i0  A TAG is a simple invisible triangle that acts like a locator for the related model. That means that the actual 3D weapon model will be shown on the TAG's location. So when making the weapon, you'll only have to animate the TAG model, the weapon model will be parented as a "child" of the TAG model. Here is the way it works :\par
\tab * You have a weapon model with right scale (use the ref_hitbox player model as a scale reference, or any other .MD3 model you can import in your 3D scene, mostly a weapon model).\par
-"v_myweapon.md3". For a very simple weapon, you'll have 1 TAG in this MD3 file : "tag_flash", wich is used to set the muzzlefash position when firing. You can also have a "tag_expansion" and a "tag_barrel", I'll explain later. There is no animation in this file, just a single frame.\par
-"v_myweapon_1(_2 and _3).md3" will be the LODs for the model.\par
-"v_myweapon_flash.md3". This is the muzzleflash model. It can be just a plane, but the best shape should be like an open cup. Set the center of mass correctly, on the middle of the "cup", on the end of the canon.\par
-"v_myweapon_hand.md3" will also be needed. In this file, you will only have a tag : tag_weapon, and no other model. This will be the animated tag that will make the weapon moving when firing, etc.\par
This file comes with a text file that defines which frames of the animation should be displayed for different actions :\par
-"v_myweapon.cfg" :\par
\b\fs20\tab // SYNTHAX : [firstframe] [framecount] [frameback] [fps]\par
\tab 0  29  0  15 // IDLE\par
\tab 31  9  0  15 // ATTACK WEAK\par
\tab 41 9  0  15 // ATTACK STRONG\par
\tab 51  4  0  15 // HOLSTER\par
\tab 55  4  0  15 // DEPLOY\b0\par
\fs24 I have no real idea what's the "frameback" variable. should stay at 0 in most cases. You can speed up the animation by increasing the "fps" value.\par
- About "tag_barrel" : In \i Quake3 \i0 a barrel model can be added to the main weapon model, and this barrel can be animated separately (see the gauntlet and BFG in action) via the code (they are not animated "by hand"). So the barrel model should be in a separate file like "v_myweapon_barrel.md3", and the "tag_barrel" should be present in "v_myweapon.md3". The barrels support seems not to work in warsow at the moment (Warsow's grenade launcher barrel is fucked but that's not hurting since the barrel is not visible in 1st person view weapon).\par
-"v_myweapon_expansion.md3". This feature is not used yet in Warsow but will certainly be one day. The model stored in this file is an expansion added to the weapon when on strong firing mode, and disappear when you're out of strong ammo. Make sure you place this expansion near the nose of the weapon cause it has to be visible on the 1st person view weapon model.\par
\fs20\par
\fs24\par
\par
\tab -\ul  \b CHARACTERS\b0\par
\ulnone\par
[note : Don't confuse  "skinning a model" (or "to skin a model"), with what you usually call a "model skin" or the "skin" files. "Skinning" a player model means binding the mesh with the skeleton, and define witch parts of the mesh is deformed by witch bone of the skeleton ; because the mesh reacts like an actual skin moving on the bones. On the other hand "skin" also means a texture. The ".skin" files used in Q3 and warsow are text files that tell the game wich texture/shader will be applied on wich part of a model.\par
note2 : I may sometimes talk about "mapping". I don't mean level designing, but uvwmapping/texturing/shader work. "Mapping" is a misused word when we talk about level designing, because levels are stored in ".map" file in many games ... hope you'll get me :|]\par
\par
\b I. REQUIREMENTS\b0\par
\par
\tab - 3D software (max, maya, xsi, lightwave, milkshape, blender, etc...)\par
\tab - HL2 .smd export plugin for your 3d software. HL2 player model guide\par
\tab - Jal's SKModel tools, you'll find all you need in the [url=http://ftp.club-internet.fr/pub/games/nofrag/warsow/warsow_0.2_sdk.zip]SDK[/url]\par
\tab - player_media pak. Contains test_box reference. It's a box that fits the game's hitbox. Contains both a .3ds to load in your 3D software, in order to scale correctly your model, and an .skm/skp to load in game. It also contains all the sources for monada [THIS IS NOT UPLOADED YET, WILL ALSO BE IN THE SDK]\par
\par
IMPORTANT : Before you read the following, I assume you have read and understood the SKMod Guide by Jal.\par
\par
\par
\b II. LIMITATIONS/TECH\b0\par
\par
\b =Polycount\b0\par
\tab - Try to keep your model under 1200 triangles. The engine can handle much more, though. If you really want to have 4k triangles or so model, you'll have to make very low detailed LODs. But be aware that most players will never use such a player model since their main goal is to have very high frame rates. Keep Q3 polycounts as a reference : Most models are under 1k triangles, and the result is very good. I mean it's far enough for a fast paced game. Grab a viewer and look at Paul Steed's models.\par
\tab - Please, whatever the polycount of your model, make LODs. I know it's annoying to create LODs for player models, since you'll have to rebind/reskin your model for each LOD. It should be quite like this :\par
\tab . high detail model ~ 1k triangles\par
\tab . middle LOD ~ 600 triangles\par
\tab . low LOD ~ 400 triangles, and even less if you can.\par
Don't take too much time making your LODs, they will only be seen from far distances. With 3dsMax, I use "optimize" modifier to generate them quickly, and I make a quick and dirty skinning. It works quite well for Monada, and the lowest LOD took me no more than 10 minutes to skin. \par
Please don't take Silverclaw as an example, that's a bad model (1450 triangles and no LOD at all ...).\par
\par
\b =Textures\b0\par
\tab - The textures of the model should be 1 tga 512*512 in 32 bits to have alpha channels (you will need alpha channel to set the full bright parts of the model). You can also use 2 different textures for the lower body and the upper body for example 2x(256*512), or a different texture for the head, if you plan to let the player chose between various faces for the same model. It's up to you, but please, the whole texture set of your model should not be higher than 1024*1024 (i recommend 512*512... seems to be really enough, regarding all the non-detailed full bright parts of the model). Once again, just look at Q3 : the whole body is ONLY a 256*256 texture, with an additional 128*64 texture for the head.\par
Please don't take Silverclaw as an example, that's a bad model (again). (1024*1024 texture for useless details).\par
\par
\b =Animations\b0\par
\tab You have no real limitations for the animations and skeleton setup (just read the jal's SKMod manual).\par
\par
\tab Try to fit the hitbox as possible. Avoid too thin character (Silverclaw is, once again, the perfect example of a too thin model), and to big characters of course, 'cause using a very big model should be like cheating).\par
\par
\par
\b III. LET'S DO IT ! FIRST TEST\b0\par
\par
\tab - I assume you have a proper sexy player model, far better than Silverclaw :p. Your model is UVmapped. You have scaled it to fit more or less the test_box in your 3D scene. Don't make the LODs now.\par
\tab - Frist create a work directory. In the directory, put all the files you'll need : \par
= textures files\par
= animation.cfg picked from an existing character, that you will edit later\par
= .skin file\par
= SKModel tools (viewer, compiler)\par
\tab - I recommend you to make a VERY simple skeleton for the moment : just a line of 3 big bones. Then skin your mesh on these bones. Just check that all the vertices of the mesh are binded, no matter for overlaps, etc. You are just gonna check how it looks in game.\par
\tab - select the bones and the mesh together, export this selection as a "reference frame", name this "test.smd" for example.\par
\tab - Make your animation scale 800 frames long. Select the bones only, export them as "animation frames". Call this file "anim.smd"\par
\tab - Now make a text file named "test_definition.txt", write this in it :\par
\b\fs20\tab outputdir .\\\par
\tab model tris\par
\tab export tris\par
\tab scale 1.0\par
\tab origin 0 0 0\par
\tab scene test.smd\par
\tab scene anim.smd\b0\fs24\par
- edit the skmodel batch files, launch it. Check the result with the viewer. If it's ok, you will check it in game. Just edit the animation.cfg and name the bones correctly, edit the skin file if needed. Put all the stuff (skm, skp, textures, .skin, animation.cfg) in basewsw/models/players/test/ , and give a look ingame with cg_thirdperson 1. Go back to your 3D software to eventually rotate, resize the model, or edit the .skin file to see your textures properly.\par
It's important at this stage to see your textures properly. It can be pain in the ass if you see when you almost finished your animations that you need to split your model in order to have different shaders on different parts of the mesh. So try to have a finished texture/shader before animating, unless you really know what you are doing. Make also the full bright skin now.\par
\par
Once everything is ok, make a proper skeleton for your model, bind it with your mesh, and then make another compilation to test in game. Then only you will begin the animations.\par
Here is a little setup tip, that will make skinning easier, and economizing a few precious polygons. You should do this for knees, elbows (and even shoulders, except if you plan to make animations where your character puts his hands up in the air...).\par
\par
\par
\b IMPORTANT : in order to display correctly the upper and lower animations, you will need to keep a bone fixed. So make a little bone between your root(pelvis) and the spine. This little bone will ALWAYS be in the same position : I'll call it the "fixed joint" in the next chapter, but you can name it as you want\b0 .\par
\par
\b IV. ANIMATING\b0\par
\par
\tab - buy the book Richard Williams' "Animator survival kit", the animator's holly bible :) I won't give animation advices, just specifics for skmodel in warsow.\par
\tab - first you can look at the animation.cfg for viciious or monada, and at the same time, look at the model in the skmviewer, so you will see exactly how works the whole shit.\par
\tab - The first 39 frames of the set ( frame 0 is the binded pose, so i mean frame 1 to 39 included) are a custom whole body animation that is displayed on player selection screen.\par
\tab - Except for death and "menu select" animations, you will have to take care of the "fixed joint" on all your animations. All your animations are displayed separately on lower and upper body, and the fixed joint is the reference point. It has the same role of the tag_torso in q3 player models.\par
Always keep this joint fixed in your 3Dview. If you animated the root bone (and i hope you did) with many rotations in the 3 axis, you will have to compensate with the fixed joint to keep its axis in the same orientation.\par
\par
\b =Legs animations\b0\par
\tab I'll give at least one good advice : Always begin your animation with the root bone (pelvis). And don't touch any other bone until you can actually feel what your character is doing with only the root animated. Use your hands to hide your model on the screen except the root. If you animated correctly your root, you can feel if he is walking forward/backward, running, jumping, etc ... without even seeing the legs.\par
Nothing else special for legs animation. Make them nice looking, they are the most important, and take care of the "fixed joint".\par
\par
\b =Torso animations\b0\par
\tab - Get rid of the torso_run animation, it won't work properly in game, there will be asynchronization with legs_run, and you character will look ridiculously drunk. In your aimation.cfg, put a fixed torso_idle frame in place of torso_run.\par
\tab - Before making any TORSO animation, you should first make the "STAND" animation, where your character is just idling (whole body), because the torso part af the stand animation will be used most of the time (while running, jumping, crouching... idling).\par
And each time you begin a new torso animation, try to keep the first and last frames in the same pose as torso_stand's first/last frame. So you will open your "stand" animation scene, delete all the key except the first one and last one (that should be the same pose), and begin a new torso animation.\par
For pain and shoot animation, also delete the first "stand" frames, since such fast movements will begin on their 1st frame.\par
\par
Once again, if you really plan to make animations, buy the Richard Williams' book. That's a master piece, with a bunch of awesome drawings for only 20 bucks.\par
\par
\par
\b V. MAKING THE LODS.\b0\par
\tab You can make your LODs whenever you want (assuming you successfully done chapter \b III\b0 ). Just use the same scene aDs your "reference" scene (where you just have the model in a binded pose). Make the LOD by hand or with a tool (optimize on 3dsmax, decimator on blender), skin it on your skeleton, and save the whole shit as a reference smd. No need to resave all the animations smd.\par
Compile it again, and just rename the tris.skm with a "_*" extension (You can make this via the batch file). Even if the *.skp is always the same file, you'll have to copy it and rename it each time you make a new LOD. So you'll have :\par
\tab - tris.skm, tris.skp = the high detailed model (let's say it's 1,2k triangles)\par
\tab - tris_1.skm, tris_1.skp = Jal advices to keep this LOD the same as the most detailed one. So it should just be a copy of tris.skm and tris.skp\par
\tab - tris_2.skm, tris_2.skp = 600 to 800 triangles\par
\tab - tris_3.skm, tris_3.skp = The lower polycount you can do.\par
\par
You're done. Each LOD will use the same .skin file and the same animation.cfg file. (see monada's directory in your basewsw/models/players/)\par
\par
\par
\b VI. USING EXISTING ANIMATIONS\b0 .\par
\par
You can't use animation .SMDs with a different skeleton.\par
You will need the original animations smd used to compile the skp, and the binded model for the .skm. \par
\tab - If you use milkshape, just import the reference.smd and make your mesh fitting the skeleton. Then you will only have to skin it and compile it. I think you can modify .smd anims directly with milkshape (never tried, though).\par
\tab - If you work with 3dsmax, you'll need character studio, and open the binded ".max" model. Same as before make your mesh fitting the skeleton, skin, compile, and you're done. \par
If you have to modify some animations (if you see overlappings...), you can import the ".bip" animation files on your 3dsmax binded model and modify the poses.\par
\par
note on Character Studio :\par
Character studio is, IMO, a real crappy stuff for animating. You can't edit tangents in your animation curves view and that's a BIG problem. Character studio is mostly used to mix motion captured anims, or to make easy footsteps. You won't need such features for warsow...\par
I used this only because you can easily paste anims made on a tall and thin character to a fat guy, even if it has not the same number of bones, with the use of .bip files... Otherwise it's far better to use classic bones.\par
\b IF ANYONE KNOWS A BETTER TOOL TO ANIMATE AND SHARE ANIMATIONS LIKE CHARACTER STUDIO, PLZ TELL ME\b0\par
\par
\tab - If your skeleton is not exactly the same as those that are already in game, you'll need the .bip files. Load them on your binded model, and re-export all the anims in .smd.\par
\par
Feel free to give me any feedback (warsow forum is the best place fo this). At the moment nobody used this guide, so it's certainly not perfect.\par
Thanks for reading.\par
Ced.\kerning2\b\fs32\par
}
 